name: 'Terraform'

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials for github actions
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_DEFAULT_REGION }}
        role-to-assume: ${{ vars.ACTIONS_ROLE }}
        role-session-name: GitHubActions
        audience: sts.amazonaws.com

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        targets: "wasm32-unknown-unknown"
        components: "rustfmt"

    - name: Setup Cargo Binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2

    # Setup Nodejs
    - name: Use Node v20
      uses: actions/setup-node@v1
      with:
        node-version: 20

    # Install & Build repo
    - name: Use Bun to install and build
      uses: oven-sh/setup-bun@v1
    - run: bun install

    - name: Setup Cargo Lambda
      run: cargo binstall cargo-lambda -y

    - name: Setup Cargo Leptos
      run: cargo install --locked cargo-leptos
    
    # Build with Cargo Lambda
    - name: Build
      run: |
        cargo leptos build --release
        LEPTOS_OUTPUT_NAME=supermailer cargo lambda build --release --features=ssr --no-default-features --arm64 --all

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./infra
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./infra
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
